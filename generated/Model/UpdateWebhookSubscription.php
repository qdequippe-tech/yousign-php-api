<?php

namespace Qdequippe\Yousign\Api\Model;

class UpdateWebhookSubscription extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return \array_key_exists($property, $this->initialized);
    }
    /**
     * Https target URL of the webhook.
     *
     * @var string|null
     */
    protected $endpoint;
    /**
     * Short description of the webhook. This property cannot start or end with whitespace, does not allow HTML tags, URL or email.
     *
     * @var string|null
     */
    protected $description;
    /**
     * @var bool|null
     */
    protected $sandbox;
    /**
     * @var mixed|null
     */
    protected $subscribedEvents;
    /**
     * Autogenerated 32 bytes key.
     *
     * @var string|null
     */
    protected $secretKey;
    /**
     * @var mixed|null
     */
    protected $scopes;
    /**
     * If a Webhook request fails for any reason, Yousign will retry the request 8 times using a back-off mechanism after: 2, 6, 30, 60, 300, 1080, 1440, 2880 min.
     *
     * @var bool|null
     */
    protected $autoRetry;
    /**
     * Choose whether the webhook is enabled or not.
     *
     * @var bool|null
     */
    protected $enabled;

    /**
     * Https target URL of the webhook.
     */
    public function getEndpoint(): ?string
    {
        return $this->endpoint;
    }

    /**
     * Https target URL of the webhook.
     */
    public function setEndpoint(?string $endpoint): self
    {
        $this->initialized['endpoint'] = true;
        $this->endpoint = $endpoint;

        return $this;
    }

    /**
     * Short description of the webhook. This property cannot start or end with whitespace, does not allow HTML tags, URL or email.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Short description of the webhook. This property cannot start or end with whitespace, does not allow HTML tags, URL or email.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    public function getSandbox(): ?bool
    {
        return $this->sandbox;
    }

    public function setSandbox(?bool $sandbox): self
    {
        $this->initialized['sandbox'] = true;
        $this->sandbox = $sandbox;

        return $this;
    }

    public function getSubscribedEvents()
    {
        return $this->subscribedEvents;
    }

    public function setSubscribedEvents($subscribedEvents): self
    {
        $this->initialized['subscribedEvents'] = true;
        $this->subscribedEvents = $subscribedEvents;

        return $this;
    }

    /**
     * Autogenerated 32 bytes key.
     */
    public function getSecretKey(): ?string
    {
        return $this->secretKey;
    }

    /**
     * Autogenerated 32 bytes key.
     */
    public function setSecretKey(?string $secretKey): self
    {
        $this->initialized['secretKey'] = true;
        $this->secretKey = $secretKey;

        return $this;
    }

    public function getScopes()
    {
        return $this->scopes;
    }

    public function setScopes($scopes): self
    {
        $this->initialized['scopes'] = true;
        $this->scopes = $scopes;

        return $this;
    }

    /**
     * If a Webhook request fails for any reason, Yousign will retry the request 8 times using a back-off mechanism after: 2, 6, 30, 60, 300, 1080, 1440, 2880 min.
     */
    public function getAutoRetry(): ?bool
    {
        return $this->autoRetry;
    }

    /**
     * If a Webhook request fails for any reason, Yousign will retry the request 8 times using a back-off mechanism after: 2, 6, 30, 60, 300, 1080, 1440, 2880 min.
     */
    public function setAutoRetry(?bool $autoRetry): self
    {
        $this->initialized['autoRetry'] = true;
        $this->autoRetry = $autoRetry;

        return $this;
    }

    /**
     * Choose whether the webhook is enabled or not.
     */
    public function getEnabled(): ?bool
    {
        return $this->enabled;
    }

    /**
     * Choose whether the webhook is enabled or not.
     */
    public function setEnabled(?bool $enabled): self
    {
        $this->initialized['enabled'] = true;
        $this->enabled = $enabled;

        return $this;
    }
}
